name: FinTrax Microservices CI/CD

on:
  push:
    branches: [ main, develop, staging ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod

env:
  AWS_REGION: us-east-1
  REGISTRY: public.ecr.aws/fintrax

jobs:
  # Determine environment based on branch
  setup:
    name: Setup Environment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      image-tag: ${{ steps.env.outputs.image-tag }}
      should-deploy: ${{ steps.env.outputs.should-deploy }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Determine Environment and Image Tag
      id: env
      run: |
        # Get short commit SHA
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)
        
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          ENV="${{ github.event.inputs.environment }}"
          echo "environment=$ENV" >> $GITHUB_OUTPUT
          echo "image-tag=$ENV-$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/main" ]; then
          echo "environment=prod" >> $GITHUB_OUTPUT
          echo "image-tag=prod-$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
          echo "environment=dev" >> $GITHUB_OUTPUT
          echo "image-tag=dev-$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        elif [ "${{ github.ref }}" == "refs/heads/staging" ]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "image-tag=staging-$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        else
          echo "environment=dev" >> $GITHUB_OUTPUT
          echo "image-tag=dev-$SHORT_SHA" >> $GITHUB_OUTPUT
          echo "should-deploy=false" >> $GITHUB_OUTPUT
        fi

  # Install dependencies and run tests
  test:
    name: Test Services
    runs-on: ubuntu-latest
    needs: setup
    strategy:
      matrix:
        service: [frontend, api-gateway, transaction-service, account-service, category-service, analytics-service, plaid-service, subscription-service]
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          services/*/package-lock.json
    
    - name: Install Dependencies - Frontend
      if: matrix.service == 'frontend'
      run: |
        cd frontend
        npm ci
    
    - name: Install Dependencies - Service
      if: matrix.service != 'frontend'
      run: |
        cd services/${{ matrix.service }}
        npm ci
    
    - name: Run Tests - Frontend
      if: matrix.service == 'frontend'
      run: |
        cd frontend
        npm test -- --watchAll=false
    
    - name: Run Tests - Service
      if: matrix.service != 'frontend'
      run: |
        cd services/${{ matrix.service }}
        npm test

  # Build all services with docker-compose
  build:
    name: Build All Services
    runs-on: ubuntu-latest
    needs: [setup, test]
    outputs:
      services-built: ${{ steps.detect.outputs.services }}
    steps:
    - uses: actions/checkout@v4
    
    - name: Detect Changed Services
      id: detect
      run: |
        # For now, we'll build all services with docker-compose
        # In the future, this can be enhanced to detect changes
        echo "services=[\"frontend\", \"api-gateway\", \"account-service\", \"transaction-service\", \"category-service\", \"analytics-service\", \"plaid-service\", \"subscription-service\"]" >> $GITHUB_OUTPUT
    
    - name: Build All Services with Docker Compose
      run: |
        echo "🏗️ Building all services with docker-compose..."
        docker-compose build --no-cache
        
        echo "📋 Listing built images..."
        docker images | grep fintrax
    
    - name: Tag Images for Registry
      run: |
        echo "🏷️ Tagging images for ECR Public registry..."
        
        # Get the image tag from setup job
        IMAGE_TAG="${{ needs.setup.outputs.image-tag }}"
        ENV="${{ needs.setup.outputs.environment }}"
        
        # Tag all services for ECR Public
        services=("frontend" "api-gateway" "account-service" "transaction-service" "category-service" "analytics-service" "plaid-service" "subscription-service")
        
        for service in "${services[@]}"; do
          # Get the local image name from docker-compose
          if [ "$service" == "frontend" ]; then
            local_image="fintrax-app-frontend"
          else
            local_image="fintrax-app-${service}"
          fi
          
          echo "Tagging ${local_image} -> ${{ env.REGISTRY }}:${ENV}-${service}-${IMAGE_TAG}"
          docker tag ${local_image}:latest ${{ env.REGISTRY }}:${ENV}-${service}-${IMAGE_TAG}
        done
        
        echo "✅ All images tagged successfully"
    
    - name: Save All Docker Images
      run: |
        echo "💾 Saving all images as artifacts..."
        services=("frontend" "api-gateway" "account-service" "transaction-service" "category-service" "analytics-service" "plaid-service" "subscription-service")
        
        for service in "${services[@]}"; do
          echo "Saving ${service}..."
          docker save ${{ env.REGISTRY }}:${{ needs.setup.outputs.environment }}-${service}-${{ needs.setup.outputs.image-tag }} | gzip > ${service}-image.tar.gz
        done
    
    - name: Upload All Image Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: all-services-images
        path: "*-image.tar.gz"
        retention-days: 1

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [setup, build]
    strategy:
      matrix:
        service: [frontend, api-gateway, transaction-service, account-service, category-service, analytics-service, plaid-service, subscription-service]
    steps:
    - uses: actions/checkout@v4
    
    - name: Download All Images
      uses: actions/download-artifact@v4
      with:
        name: all-services-images
    
    - name: Load Docker Image
      run: |
        echo "📦 Loading ${{ matrix.service }} image..."
        docker load < ${{ matrix.service }}-image.tar.gz
    
    - name: Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}:${{ needs.setup.outputs.environment }}-${{ matrix.service }}-${{ needs.setup.outputs.image-tag }}'
        format: 'sarif'
        output: 'trivy-${{ matrix.service }}.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-${{ matrix.service }}.sarif'
        category: '${{ matrix.service }}-security-scan'
    
    - name: Run Trivy Vulnerability Scanner (Table format)
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}:${{ needs.setup.outputs.environment }}-${{ matrix.service }}-${{ needs.setup.outputs.image-tag }}'
        format: 'table'
        severity: 'CRITICAL,HIGH'

  # Deploy to ECR Public
  deploy:
    name: Deploy to ECR Public
    runs-on: ubuntu-latest
    needs: [setup, build, security-scan]
    if: needs.setup.outputs.should-deploy == 'true'
    environment: ${{ needs.setup.outputs.environment }}
    strategy:
      matrix:
        service: [frontend, api-gateway, transaction-service, account-service, category-service, analytics-service, plaid-service, subscription-service]
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Download All Images
      uses: actions/download-artifact@v4
      with:
        name: all-services-images
    
    - name: Load Docker Image
      run: |
        echo "📦 Loading ${{ matrix.service }} image..."
        docker load < ${{ matrix.service }}-image.tar.gz
    
    - name: Login to ECR Public
      run: |
        aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws
    
    - name: Create ECR Public Repository
      run: |
        echo "🏗️ Creating single repository: fintrax"
        aws ecr-public create-repository --repository-name fintrax --region us-east-1 || echo "Repository fintrax already exists"
    
    - name: Push Image to ECR Public
      run: |
        echo "🚀 Pushing ${{ matrix.service }} to ECR Public..."
        docker push ${{ env.REGISTRY }}:${{ needs.setup.outputs.environment }}-${{ matrix.service }}-${{ needs.setup.outputs.image-tag }}
    
    - name: Tag as Latest
      run: |
        echo "🏷️ Tagging ${{ matrix.service }} as latest for ${{ needs.setup.outputs.environment }}..."
        docker tag ${{ env.REGISTRY }}:${{ needs.setup.outputs.environment }}-${{ matrix.service }}-${{ needs.setup.outputs.image-tag }} ${{ env.REGISTRY }}:${{ needs.setup.outputs.environment }}-${{ matrix.service }}-latest
        docker push ${{ env.REGISTRY }}:${{ needs.setup.outputs.environment }}-${{ matrix.service }}-latest

  # Deployment summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [setup, deploy]
    if: always() && needs.setup.outputs.should-deploy == 'true'
    steps:
    - name: Generate Deployment Report
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Environment:** ${{ needs.setup.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "**Image Tag:** ${{ needs.setup.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 Published Images (ECR Public - FREE TIER):" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        services=("frontend" "api-gateway" "transaction-service" "account-service" "category-service" "analytics-service" "plaid-service" "subscription-service")
        for service in "${services[@]}"; do
          echo "- \`${{ env.REGISTRY }}:${{ needs.setup.outputs.environment }}-${service}-${{ needs.setup.outputs.image-tag }}\`" >> $GITHUB_STEP_SUMMARY
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🏗️ Build Strategy:" >> $GITHUB_STEP_SUMMARY
        echo "- 🐳 **Docker Compose**: All services built together with \`docker-compose build\`" >> $GITHUB_STEP_SUMMARY
        echo "- ⚡ **Efficient**: Single build command for entire microservices stack" >> $GITHUB_STEP_SUMMARY
        echo "- 🔄 **Consistent**: Same build environment as local development" >> $GITHUB_STEP_SUMMARY
        echo "- 📦 **Artifacts**: Images saved and shared between jobs efficiently" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔍 Security Scan Results:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Trivy vulnerability scans completed" >> $GITHUB_STEP_SUMMARY
        echo "- 📊 Check **Security** tab for detailed vulnerability reports" >> $GITHUB_STEP_SUMMARY
        echo "- 🛡️ All images scanned for CRITICAL and HIGH severity issues" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Simple Branching Strategy:" >> $GITHUB_STEP_SUMMARY
        echo "- 🏷️ **main branch** → **prod** environment → \`fintrax:prod-{service}-latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- 🏷️ **develop branch** → **dev** environment → \`fintrax:dev-{service}-latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- 🏷️ **staging branch** → **staging** environment → \`fintrax:staging-{service}-latest\`" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Images are available in **ECR Public** (Free Tier)" >> $GITHUB_STEP_SUMMARY
        echo "2. Ready for deployment to container platforms" >> $GITHUB_STEP_SUMMARY
        echo "3. Update application configuration with new image URLs" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Status: Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ❌ Status: Deployment Failed!" >> $GITHUB_STEP_SUMMARY
        fi
